//******************************************************************************
//*  Sample-1.lts (for MTSA)
//*  Create Date      : 2021/4/8
//*  Creator Name     : 
//*  MTSA run command : [java -jar -Xmx8G mtsa.jar] メモリサイズに応じて8Gは要変更
//*****************************************************************************/


//*****************************************************************************
// Environment
//*****************************************************************************

/* set variable */
const MaxHeight = 5 //ドローンは前後の数字の高さにしか移動できない
range Height = 1..MaxHeight

/* set Actions (事象の集合) */
set ControllerbleActions = {battery['low], battery['safe], land, up[2..MaxHeight], down[1..MaxHeight-1]}


/* Drone モデル */

//電池残量管理
BATTERY = SAFE,
SAFE = (battery['low] -> LOW),
LOW  = (battery['safe] -> SAFE).

//移動管理(こいつを高度flyだけと移動moveだけ分割したい)
ALTITUDE  = (takeoff -> ACTION[1]),
ACTION[h:Height] = (when(h == 1) land-> ALTITUDE
                   |when(h > 1) down[h-1] -> ACTION[h-1]
				   |when(h < MaxHeight) up[h+1] -> ACTION[h+1]).

|| DroneEnvironment = (BATTERY || ALTITUDE).



//*****************************************************************************
// Requirement
//*****************************************************************************

const LimitHeight = 3 //高度制限：(MaxHeight/2)+1とかしてもいいかも

fluent LOW_BATTERY = <battery['low],battery['safe]>

ltl_property P_DO_NOT_UP = [](!up[LimitHeight])
ltl_property P_LOW_BATTERY = [](LOW_BATTERY -> !up[2..MaxHeight])


//*****************************************************************************
// Controller
//*****************************************************************************

/* 従来の離散制御器合成 */
controllerSpec Specification =
{
	safety       = {
					P_DO_NOT_UP,
                    P_LOW_BATTERY,
				   }
	//liveness     = {GOAL}
	controllable = {ControllerbleActions}
}
//controller ||Controller = (DroneEnvironment)~{Specification}.
controller ||Controller = (BATTERY || ALTITUDE)~{Specification}.


/* 段階的制御器合成（good case） */
controllerSpec SpecG1 =
{
	safety       = {
					P_DO_NOT_UP,
				   }
	//liveness     = {GOAL}
	controllable = {ControllerbleActions}
}

controllerSpec SpecG2 =
{
	safety       = {
					P_LOW_BATTERY,
				   }
	//liveness     = {GOAL}
	controllable = {ControllerbleActions}
}

||PartEnvironmentG1 = (ALTITUDE).
controller ||PartControllerG1 = (PartEnvironmentG1)~{SpecG1}.
||PartEnvironmentG2 = (PartControllerG1 || BATTERY).
controller ||Controller_STEPWISED_GOOD = (PartEnvironmentG2)~{SpecG2}.


/* 段階的制御器合成（bad case）  */
controllerSpec SpecB1 =
{
	safety       = {
					P_LOW_BATTERY,
				   }
	//liveness     = {GOAL}
	controllable = {ControllerbleActions}
}

controllerSpec SpecB2 =
{
	safety       = {
					P_DO_NOT_UP,
				   }
	//liveness     = {GOAL}
	controllable = {ControllerbleActions}
}

||PartEnvironmentB1 = (ALTITUDE || BATTERY).
controller ||PartControllerB1 = (PartEnvironmentB1)~{SpecB1}.
||PartEnvironmentB2 = (PartControllerB1).
controller ||Controller_STEPWISED_BAD = (PartEnvironmentB2)~{SpecB2}.

