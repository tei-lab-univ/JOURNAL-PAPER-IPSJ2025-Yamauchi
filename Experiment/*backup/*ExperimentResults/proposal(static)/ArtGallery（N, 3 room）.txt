Compiled: VISITOR
Compiled: HALL
Compiled: ROOM_A
Compiled: ROOM_B
Compiled: DOOR_LOCK_HALL
Compiled: DOOR_LOCK_A
Compiled: DOOR_LOCK_B
Formula !P_VISITOR_RULE_HALL = (true U (HALL_LOCKED & allow_Hall))
GBA 2 states 3 transitions
Buchi automata:
P_VISITOR_RULE_HALL = S0,
S1@ =(true -> S1),
S0 =(true -> S0 |HALL_LOCKED&allow_Hall -> S1).
Composition:P_VISITOR_RULE_HALL = HALL_LOCKED || allow_Hall || SYNC || P_VISITOR_RULE_HALL
State Space: 2 * 2 * 2 * 2 = 2 ** 4
Composing...
-- States: 16 Transitions: 41 Memory used: 28033KB
Composed in 44ms
After Tau elimination = 8 state
Tau reduction ON
P_VISITOR_RULE_HALL minimising...
Minimised States: 3 in 0ms
make DFA(P_VISITOR_RULE_HALL)
DFA(P_VISITOR_RULE_HALL) has 2 states.
Tau reduction ON
P_VISITOR_RULE_HALL minimising...
Minimised States: 2 in 0ms
Formula !P_LOCK_RULE_HALL1 = (true U ((!HALL_LOCKED & arrive_Hall[2]) & X (!lock_Hall U (resRoomStatus & !lock_Hall))))
GBA 3 states 5 transitions
Buchi automata:
P_LOCK_RULE_HALL1 = S0,
S1@ =(true -> S1),
S0 =(!HALL_LOCKED&arrive_Hall[2] -> S2 |true -> S0),
S2 =(!lock_Hall -> S2 |resRoomStatus&!lock_Hall -> S1).
Composition:P_LOCK_RULE_HALL1 = HALL_LOCKED || arrive_Hall[2] || resRoomStatus || lock_Hall || SYNC || P_LOCK_RULE_HALL1
State Space: 2 * 2 * 2 * 2 * 2 * 4 = 2 ** 7
Composing...
-- States: 43 Transitions: 120 Memory used: 26626KB
Composed in 50ms
After Tau elimination = 21 state
Tau reduction ON
P_LOCK_RULE_HALL1 minimising....
Minimised States: 5 in 6ms
make DFA(P_LOCK_RULE_HALL1)
DFA(P_LOCK_RULE_HALL1) has 6 states.
Tau reduction ON
P_LOCK_RULE_HALL1 minimising....
Minimised States: 3 in 0ms
Formula !P_LOCK_RULE_HALL2 = (true U ((HALL_TH_LOCKED1 & HALL_TH_LOCKED2) & unLock_Hall))
GBA 2 states 3 transitions
Buchi automata:
P_LOCK_RULE_HALL2 = S0,
S1@ =(true -> S1),
S0 =(true -> S0 |HALL_TH_LOCKED1&HALL_TH_LOCKED2&unLock_Hall -> S1).
Composition:P_LOCK_RULE_HALL2 = HALL_TH_LOCKED1 || HALL_TH_LOCKED2 || unLock_Hall || SYNC || P_LOCK_RULE_HALL2
State Space: 2 * 2 * 2 * 2 * 2 = 2 ** 5
Composing...
-- States: 32 Transitions: 97 Memory used: 26464KB
Composed in 28ms
After Tau elimination = 16 state
Tau reduction ON
P_LOCK_RULE_HALL2 minimising....
Minimised States: 5 in 0ms
make DFA(P_LOCK_RULE_HALL2)
DFA(P_LOCK_RULE_HALL2) has 4 states.
Tau reduction ON
P_LOCK_RULE_HALL2 minimising....
Minimised States: 4 in 0ms
Formula !P_UNLOCK_RULE_HALL1 = (true U ((HALL_LOCKED & allow_A) & X (!unLock_Hall U (resRoomStatus & !unLock_Hall))))
GBA 3 states 5 transitions
Buchi automata:
P_UNLOCK_RULE_HALL1 = S0,
S1@ =(true -> S1),
S0 =(true -> S0 |HALL_LOCKED&allow_A -> S2),
S2 =(!unLock_Hall -> S2 |resRoomStatus&!unLock_Hall -> S1).
Composition:P_UNLOCK_RULE_HALL1 = HALL_LOCKED || allow_A || resRoomStatus || unLock_Hall || SYNC || P_UNLOCK_RULE_HALL1
State Space: 2 * 2 * 2 * 2 * 2 * 4 = 2 ** 7
Composing...
-- States: 44 Transitions: 124 Memory used: 26478KB
Composed in 32ms
After Tau elimination = 22 state
Tau reduction ON
P_UNLOCK_RULE_HALL1 minimising.....
Minimised States: 5 in 0ms
make DFA(P_UNLOCK_RULE_HALL1)
DFA(P_UNLOCK_RULE_HALL1) has 6 states.
Tau reduction ON
P_UNLOCK_RULE_HALL1 minimising....
Minimised States: 3 in 0ms
Formula !P_HALL_LOCK_TIMING = (true U (!HALL_LOCK_TIME & lock_Hall))
GBA 2 states 3 transitions
Buchi automata:
P_HALL_LOCK_TIMING = S0,
S1@ =(true -> S1),
S0 =(!HALL_LOCK_TIME&lock_Hall -> S1 |true -> S0).
Composition:P_HALL_LOCK_TIMING = HALL_LOCK_TIME || lock_Hall || SYNC || P_HALL_LOCK_TIMING
State Space: 2 * 2 * 2 * 2 = 2 ** 4
Composing...
-- States: 16 Transitions: 41 Memory used: 26406KB
Composed in 34ms
After Tau elimination = 8 state
Tau reduction ON
P_HALL_LOCK_TIMING minimising...
Minimised States: 3 in 0ms
make DFA(P_HALL_LOCK_TIMING)
DFA(P_HALL_LOCK_TIMING) has 2 states.
Tau reduction ON
P_HALL_LOCK_TIMING minimising...
Minimised States: 2 in 0ms
Formula !P_HALL_UNLOCK_TIMING = (true U (!UNLOCK_TIME & unLock_Hall))
GBA 2 states 3 transitions
Buchi automata:
P_HALL_UNLOCK_TIMING = S0,
S1@ =(true -> S1),
S0 =(!UNLOCK_TIME&unLock_Hall -> S1 |true -> S0).
Composition:P_HALL_UNLOCK_TIMING = UNLOCK_TIME || unLock_Hall || SYNC || P_HALL_UNLOCK_TIMING
State Space: 2 * 2 * 2 * 2 = 2 ** 4
Composing...
-- States: 16 Transitions: 145 Memory used: 26396KB
Composed in 32ms
After Tau elimination = 8 state
Tau reduction ON
P_HALL_UNLOCK_TIMING minimising...
Minimised States: 3 in 0ms
make DFA(P_HALL_UNLOCK_TIMING)
DFA(P_HALL_UNLOCK_TIMING) has 2 states.
Tau reduction ON
P_HALL_UNLOCK_TIMING minimising...
Minimised States: 2 in 0ms
Formula !P_VISITOR_RULE_A = (true U (A_LOCKED & allow_A))
GBA 2 states 3 transitions
Buchi automata:
P_VISITOR_RULE_A = S0,
S1@ =(true -> S1),
S0 =(true -> S0 |A_LOCKED&allow_A -> S1).
Composition:P_VISITOR_RULE_A = A_LOCKED || allow_A || SYNC || P_VISITOR_RULE_A
State Space: 2 * 2 * 2 * 2 = 2 ** 4
Composing...
-- States: 16 Transitions: 41 Memory used: 26481KB
Composed in 33ms
After Tau elimination = 8 state
Tau reduction ON
P_VISITOR_RULE_A minimising...
Minimised States: 3 in 0ms
make DFA(P_VISITOR_RULE_A)
DFA(P_VISITOR_RULE_A) has 2 states.
Tau reduction ON
P_VISITOR_RULE_A minimising...
Minimised States: 2 in 0ms
Formula !P_LOCK_RULE_A1 = (true U ((!A_LOCKED & arrive_A[2]) & X (!lock_A U (resRoomStatus & !lock_A))))
GBA 3 states 5 transitions
Buchi automata:
P_LOCK_RULE_A1 = S0,
S1@ =(true -> S1),
S0 =(!A_LOCKED&arrive_A[2] -> S2 |true -> S0),
S2 =(!lock_A -> S2 |resRoomStatus&!lock_A -> S1).
Composition:P_LOCK_RULE_A1 = A_LOCKED || arrive_A[2] || resRoomStatus || lock_A || SYNC || P_LOCK_RULE_A1
State Space: 2 * 2 * 2 * 2 * 2 * 4 = 2 ** 7
Composing...
-- States: 43 Transitions: 120 Memory used: 26507KB
Composed in 42ms
After Tau elimination = 21 state
Tau reduction ON
P_LOCK_RULE_A1 minimising....
Minimised States: 5 in 0ms
make DFA(P_LOCK_RULE_A1)
DFA(P_LOCK_RULE_A1) has 6 states.
Tau reduction ON
P_LOCK_RULE_A1 minimising....
Minimised States: 3 in 0ms
Formula !P_LOCK_RULE_A2 = (true U ((A_TH_LOCKED1 & A_TH_LOCKED2) & unLock_A))
GBA 2 states 3 transitions
Buchi automata:
P_LOCK_RULE_A2 = S0,
S1@ =(true -> S1),
S0 =(true -> S0 |A_TH_LOCKED1&A_TH_LOCKED2&unLock_A -> S1).
Composition:P_LOCK_RULE_A2 = A_TH_LOCKED1 || A_TH_LOCKED2 || unLock_A || SYNC || P_LOCK_RULE_A2
State Space: 2 * 2 * 2 * 2 * 2 = 2 ** 5
Composing...
-- States: 32 Transitions: 97 Memory used: 26510KB
Composed in 34ms
After Tau elimination = 16 state
Tau reduction ON
P_LOCK_RULE_A2 minimising....
Minimised States: 5 in 0ms
make DFA(P_LOCK_RULE_A2)
DFA(P_LOCK_RULE_A2) has 4 states.
Tau reduction ON
P_LOCK_RULE_A2 minimising....
Minimised States: 4 in 0ms
Formula !P_UNLOCK_RULE_A1 = (true U ((A_LOCKED & allow_B) & X (!unLock_A U (resRoomStatus & !unLock_A))))
GBA 3 states 5 transitions
Buchi automata:
P_UNLOCK_RULE_A1 = S0,
S1@ =(true -> S1),
S0 =(true -> S0 |A_LOCKED&allow_B -> S2),
S2 =(!unLock_A -> S2 |resRoomStatus&!unLock_A -> S1).
Composition:P_UNLOCK_RULE_A1 = A_LOCKED || allow_B || resRoomStatus || unLock_A || SYNC || P_UNLOCK_RULE_A1
State Space: 2 * 2 * 2 * 2 * 2 * 4 = 2 ** 7
Composing...
-- States: 44 Transitions: 124 Memory used: 26567KB
Composed in 32ms
After Tau elimination = 22 state
Tau reduction ON
P_UNLOCK_RULE_A1 minimising.....
Minimised States: 5 in 1ms
make DFA(P_UNLOCK_RULE_A1)
DFA(P_UNLOCK_RULE_A1) has 6 states.
Tau reduction ON
P_UNLOCK_RULE_A1 minimising....
Minimised States: 3 in 0ms
Formula !P_A_LOCK_TIMING = (true U (!A_LOCK_TIME & lock_A))
GBA 2 states 3 transitions
Buchi automata:
P_A_LOCK_TIMING = S0,
S1@ =(true -> S1),
S0 =(!A_LOCK_TIME&lock_A -> S1 |true -> S0).
Composition:P_A_LOCK_TIMING = A_LOCK_TIME || lock_A || SYNC || P_A_LOCK_TIMING
State Space: 2 * 2 * 2 * 2 = 2 ** 4
Composing...
-- States: 16 Transitions: 41 Memory used: 26546KB
Composed in 35ms
After Tau elimination = 8 state
Tau reduction ON
P_A_LOCK_TIMING minimising...
Minimised States: 3 in 0ms
make DFA(P_A_LOCK_TIMING)
DFA(P_A_LOCK_TIMING) has 2 states.
Tau reduction ON
P_A_LOCK_TIMING minimising...
Minimised States: 2 in 0ms
Formula !P_A_UNLOCK_TIMING = (true U (!UNLOCK_TIME & unLock_A))
GBA 2 states 3 transitions
Buchi automata:
P_A_UNLOCK_TIMING = S0,
S1@ =(true -> S1),
S0 =(!UNLOCK_TIME&unLock_A -> S1 |true -> S0).
Composition:P_A_UNLOCK_TIMING = UNLOCK_TIME || unLock_A || SYNC || P_A_UNLOCK_TIMING
State Space: 2 * 2 * 2 * 2 = 2 ** 4
Composing...
-- States: 16 Transitions: 145 Memory used: 26611KB
Composed in 18ms
After Tau elimination = 8 state
Tau reduction ON
P_A_UNLOCK_TIMING minimising...
Minimised States: 3 in 0ms
make DFA(P_A_UNLOCK_TIMING)
DFA(P_A_UNLOCK_TIMING) has 2 states.
Tau reduction ON
P_A_UNLOCK_TIMING minimising...
Minimised States: 2 in 0ms
Formula !P_VISITOR_RULE_B = (true U (B_LOCKED & allow_B))
GBA 2 states 3 transitions
Buchi automata:
P_VISITOR_RULE_B = S0,
S1@ =(true -> S1),
S0 =(true -> S0 |B_LOCKED&allow_B -> S1).
Composition:P_VISITOR_RULE_B = B_LOCKED || allow_B || SYNC || P_VISITOR_RULE_B
State Space: 2 * 2 * 2 * 2 = 2 ** 4
Composing...
-- States: 16 Transitions: 41 Memory used: 26617KB
Composed in 33ms
After Tau elimination = 8 state
Tau reduction ON
P_VISITOR_RULE_B minimising...
Minimised States: 3 in 0ms
make DFA(P_VISITOR_RULE_B)
DFA(P_VISITOR_RULE_B) has 2 states.
Tau reduction ON
P_VISITOR_RULE_B minimising...
Minimised States: 2 in 0ms
Formula !P_LOCK_RULE_B1 = (true U ((!B_LOCKED & arrive_B[2]) & X (!lock_B U (resRoomStatus & !lock_B))))
GBA 3 states 5 transitions
Buchi automata:
P_LOCK_RULE_B1 = S0,
S1@ =(true -> S1),
S0 =(!B_LOCKED&arrive_B[2] -> S2 |true -> S0),
S2 =(!lock_B -> S2 |resRoomStatus&!lock_B -> S1).
Composition:P_LOCK_RULE_B1 = B_LOCKED || arrive_B[2] || resRoomStatus || lock_B || SYNC || P_LOCK_RULE_B1
State Space: 2 * 2 * 2 * 2 * 2 * 4 = 2 ** 7
Composing...
-- States: 43 Transitions: 120 Memory used: 26683KB
Composed in 33ms
After Tau elimination = 21 state
Tau reduction ON
P_LOCK_RULE_B1 minimising....
Minimised States: 5 in 0ms
make DFA(P_LOCK_RULE_B1)
DFA(P_LOCK_RULE_B1) has 6 states.
Tau reduction ON
P_LOCK_RULE_B1 minimising....
Minimised States: 3 in 0ms
Formula !P_LOCK_RULE_B2 = (true U ((B_TH_LOCKED1 & B_TH_LOCKED2) & unLock_B))
GBA 2 states 3 transitions
Buchi automata:
P_LOCK_RULE_B2 = S0,
S1@ =(true -> S1),
S0 =(true -> S0 |B_TH_LOCKED1&B_TH_LOCKED2&unLock_B -> S1).
Composition:P_LOCK_RULE_B2 = B_TH_LOCKED1 || B_TH_LOCKED2 || unLock_B || SYNC || P_LOCK_RULE_B2
State Space: 2 * 2 * 2 * 2 * 2 = 2 ** 5
Composing...
-- States: 32 Transitions: 97 Memory used: 28132KB
Composed in 0ms
After Tau elimination = 16 state
Tau reduction ON
P_LOCK_RULE_B2 minimising....
Minimised States: 5 in 0ms
make DFA(P_LOCK_RULE_B2)
DFA(P_LOCK_RULE_B2) has 4 states.
Tau reduction ON
P_LOCK_RULE_B2 minimising....
Minimised States: 4 in 0ms
Formula !P_UNLOCK_RULE_B1 = (true U ((B_LOCKED & allow_Out) & X (!unLock_B U (resRoomStatus & !unLock_B))))
GBA 3 states 5 transitions
Buchi automata:
P_UNLOCK_RULE_B1 = S0,
S1@ =(true -> S1),
S0 =(true -> S0 |B_LOCKED&allow_Out -> S2),
S2 =(!unLock_B -> S2 |resRoomStatus&!unLock_B -> S1).
Composition:P_UNLOCK_RULE_B1 = B_LOCKED || allow_Out || resRoomStatus || unLock_B || SYNC || P_UNLOCK_RULE_B1
State Space: 2 * 2 * 2 * 2 * 2 * 4 = 2 ** 7
Composing...
-- States: 44 Transitions: 124 Memory used: 26820KB
Composed in 41ms
After Tau elimination = 22 state
Tau reduction ON
P_UNLOCK_RULE_B1 minimising.....
Minimised States: 5 in 0ms
make DFA(P_UNLOCK_RULE_B1)
DFA(P_UNLOCK_RULE_B1) has 6 states.
Tau reduction ON
P_UNLOCK_RULE_B1 minimising....
Minimised States: 3 in 0ms
Formula !P_B_LOCK_TIMING = (true U (!B_LOCK_TIME & lock_B))
GBA 2 states 3 transitions
Buchi automata:
P_B_LOCK_TIMING = S0,
S1@ =(true -> S1),
S0 =(!B_LOCK_TIME&lock_B -> S1 |true -> S0).
Composition:P_B_LOCK_TIMING = B_LOCK_TIME || lock_B || SYNC || P_B_LOCK_TIMING
State Space: 2 * 2 * 2 * 2 = 2 ** 4
Composing...
-- States: 16 Transitions: 41 Memory used: 26775KB
Composed in 35ms
After Tau elimination = 8 state
Tau reduction ON
P_B_LOCK_TIMING minimising...
Minimised States: 3 in 0ms
make DFA(P_B_LOCK_TIMING)
DFA(P_B_LOCK_TIMING) has 2 states.
Tau reduction ON
P_B_LOCK_TIMING minimising...
Minimised States: 2 in 0ms
Formula !P_B_UNLOCK_TIMING = (true U (!UNLOCK_TIME & unLock_B))
GBA 2 states 3 transitions
Buchi automata:
P_B_UNLOCK_TIMING = S0,
S1@ =(true -> S1),
S0 =(!UNLOCK_TIME&unLock_B -> S1 |true -> S0).
Composition:P_B_UNLOCK_TIMING = UNLOCK_TIME || unLock_B || SYNC || P_B_UNLOCK_TIMING
State Space: 2 * 2 * 2 * 2 = 2 ** 4
Composing...
-- States: 16 Transitions: 145 Memory used: 26821KB
Composed in 34ms
After Tau elimination = 8 state
Tau reduction ON
P_B_UNLOCK_TIMING minimising...
Minimised States: 3 in 0ms
make DFA(P_B_UNLOCK_TIMING)
DFA(P_B_UNLOCK_TIMING) has 2 states.
Tau reduction ON
P_B_UNLOCK_TIMING minimising...
Minimised States: 2 in 0ms
Compile is Complete!



===================================================
      Problem-Splitting Controller Synthesis       
===================================================
[info] STEP1 : Analyzing the synthesis process...
[info] Monitored Models
> P_LOCK_RULE_A1 : [VISITOR, ROOM_A, DOOR_LOCK_A]
> P_A_LOCK_TIMING : [VISITOR, ROOM_A, DOOR_LOCK_A]
> P_LOCK_RULE_HALL1 : [VISITOR, HALL, DOOR_LOCK_HALL]
> P_VISITOR_RULE_HALL : [VISITOR, HALL, DOOR_LOCK_HALL]
> P_UNLOCK_RULE_HALL1 : [VISITOR, ROOM_A, DOOR_LOCK_HALL]
> P_LOCK_RULE_B1 : [VISITOR, ROOM_B, DOOR_LOCK_B]
> P_LOCK_RULE_HALL2 : [VISITOR, HALL, ROOM_A, DOOR_LOCK_HALL]
> P_HALL_LOCK_TIMING : [VISITOR, HALL, DOOR_LOCK_HALL]
> P_UNLOCK_RULE_B1 : [VISITOR, DOOR_LOCK_B]
> P_B_UNLOCK_TIMING : [VISITOR, HALL, ROOM_A, ROOM_B, DOOR_LOCK_B]
> P_A_UNLOCK_TIMING : [VISITOR, HALL, ROOM_A, ROOM_B, DOOR_LOCK_A]
> P_HALL_UNLOCK_TIMING : [VISITOR, HALL, ROOM_A, ROOM_B, DOOR_LOCK_HALL]
> P_VISITOR_RULE_B : [VISITOR, ROOM_B, DOOR_LOCK_B]
> P_LOCK_RULE_A2 : [VISITOR, ROOM_A, ROOM_B, DOOR_LOCK_A]
> P_UNLOCK_RULE_A1 : [VISITOR, ROOM_B, DOOR_LOCK_A]
> P_B_LOCK_TIMING : [VISITOR, ROOM_B, DOOR_LOCK_B]
> P_VISITOR_RULE_A : [VISITOR, ROOM_A, DOOR_LOCK_A]
> P_LOCK_RULE_B2 : [VISITOR, ROOM_B, DOOR_LOCK_B]

[info] Synthetic Cost (number of monitored models)
partControllers : []
> P_LOCK_RULE_A1's cost : 3
> P_A_LOCK_TIMING's cost : 3
> P_LOCK_RULE_HALL1's cost : 3
> P_VISITOR_RULE_HALL's cost : 3
> P_UNLOCK_RULE_HALL1's cost : 3
> P_LOCK_RULE_B1's cost : 3
> P_LOCK_RULE_HALL2's cost : 4
> P_HALL_LOCK_TIMING's cost : 3
> P_UNLOCK_RULE_B1's cost : 2
> P_B_UNLOCK_TIMING's cost : 5
> P_A_UNLOCK_TIMING's cost : 5
> P_HALL_UNLOCK_TIMING's cost : 5
> P_VISITOR_RULE_B's cost : 3
> P_LOCK_RULE_A2's cost : 4
> P_UNLOCK_RULE_A1's cost : 3
> P_B_LOCK_TIMING's cost : 3
> P_VISITOR_RULE_A's cost : 3
> P_LOCK_RULE_B2's cost : 3

[info] Monitored Models
> P_LOCK_RULE_A1 : [ROOM_A, DOOR_LOCK_A, VISITOR, DOOR_LOCK_B]
> P_A_LOCK_TIMING : [ROOM_A, DOOR_LOCK_A, VISITOR, DOOR_LOCK_B]
> P_LOCK_RULE_HALL1 : [HALL, DOOR_LOCK_HALL, VISITOR, DOOR_LOCK_B]
> P_VISITOR_RULE_HALL : [HALL, DOOR_LOCK_HALL, VISITOR, DOOR_LOCK_B]
> P_UNLOCK_RULE_HALL1 : [ROOM_A, DOOR_LOCK_HALL, VISITOR, DOOR_LOCK_B]
> P_LOCK_RULE_B1 : [ROOM_B, VISITOR, DOOR_LOCK_B]
> P_LOCK_RULE_HALL2 : [HALL, ROOM_A, DOOR_LOCK_HALL, VISITOR, DOOR_LOCK_B]
> P_HALL_LOCK_TIMING : [HALL, DOOR_LOCK_HALL, VISITOR, DOOR_LOCK_B]
> P_B_UNLOCK_TIMING : [HALL, ROOM_A, ROOM_B, VISITOR, DOOR_LOCK_B]
> P_A_UNLOCK_TIMING : [HALL, ROOM_A, ROOM_B, DOOR_LOCK_A, VISITOR, DOOR_LOCK_B]
> P_HALL_UNLOCK_TIMING : [HALL, ROOM_A, ROOM_B, DOOR_LOCK_HALL, VISITOR, DOOR_LOCK_B]
> P_VISITOR_RULE_B : [ROOM_B, VISITOR, DOOR_LOCK_B]
> P_LOCK_RULE_A2 : [ROOM_A, ROOM_B, DOOR_LOCK_A, VISITOR, DOOR_LOCK_B]
> P_UNLOCK_RULE_A1 : [ROOM_B, DOOR_LOCK_A, VISITOR, DOOR_LOCK_B]
> P_B_LOCK_TIMING : [ROOM_B, VISITOR, DOOR_LOCK_B]
> P_VISITOR_RULE_A : [ROOM_A, DOOR_LOCK_A, VISITOR, DOOR_LOCK_B]
> P_LOCK_RULE_B2 : [ROOM_B, VISITOR, DOOR_LOCK_B]

[info] Synthetic Cost (number of monitored models)
partControllers : [[VISITOR, DOOR_LOCK_B]]
> P_LOCK_RULE_A1's cost : 4
> P_A_LOCK_TIMING's cost : 4
> P_LOCK_RULE_HALL1's cost : 4
> P_VISITOR_RULE_HALL's cost : 4
> P_UNLOCK_RULE_HALL1's cost : 4
> P_LOCK_RULE_B1's cost : 3
> P_LOCK_RULE_HALL2's cost : 5
> P_HALL_LOCK_TIMING's cost : 4
> P_B_UNLOCK_TIMING's cost : 5
> P_A_UNLOCK_TIMING's cost : 6
> P_HALL_UNLOCK_TIMING's cost : 6
> P_VISITOR_RULE_B's cost : 3
> P_LOCK_RULE_A2's cost : 5
> P_UNLOCK_RULE_A1's cost : 4
> P_B_LOCK_TIMING's cost : 3
> P_VISITOR_RULE_A's cost : 4
> P_LOCK_RULE_B2's cost : 3

[info] Monitored Models
> P_LOCK_RULE_A1 : [ROOM_A, DOOR_LOCK_A, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_A_LOCK_TIMING : [ROOM_A, DOOR_LOCK_A, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_LOCK_RULE_HALL1 : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_VISITOR_RULE_HALL : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_UNLOCK_RULE_HALL1 : [ROOM_A, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_LOCK_RULE_HALL2 : [HALL, ROOM_A, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_HALL_LOCK_TIMING : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_B_UNLOCK_TIMING : [HALL, ROOM_A, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_A_UNLOCK_TIMING : [HALL, ROOM_A, DOOR_LOCK_A, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_HALL_UNLOCK_TIMING : [HALL, ROOM_A, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_LOCK_RULE_A2 : [ROOM_A, DOOR_LOCK_A, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_UNLOCK_RULE_A1 : [DOOR_LOCK_A, VISITOR, ROOM_B, DOOR_LOCK_B]
> P_VISITOR_RULE_A : [ROOM_A, DOOR_LOCK_A, VISITOR, ROOM_B, DOOR_LOCK_B]

[info] Synthetic Cost (number of monitored models)
partControllers : [[VISITOR, ROOM_B, DOOR_LOCK_B]]
> P_LOCK_RULE_A1's cost : 5
> P_A_LOCK_TIMING's cost : 5
> P_LOCK_RULE_HALL1's cost : 5
> P_VISITOR_RULE_HALL's cost : 5
> P_UNLOCK_RULE_HALL1's cost : 5
> P_LOCK_RULE_HALL2's cost : 6
> P_HALL_LOCK_TIMING's cost : 5
> P_B_UNLOCK_TIMING's cost : 5
> P_A_UNLOCK_TIMING's cost : 6
> P_HALL_UNLOCK_TIMING's cost : 6
> P_LOCK_RULE_A2's cost : 5
> P_UNLOCK_RULE_A1's cost : 4
> P_VISITOR_RULE_A's cost : 5

[info] Monitored Models
> P_LOCK_RULE_A1 : [ROOM_A, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_A_LOCK_TIMING : [ROOM_A, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_LOCK_RULE_HALL1 : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_VISITOR_RULE_HALL : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_UNLOCK_RULE_HALL1 : [ROOM_A, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_LOCK_RULE_HALL2 : [HALL, ROOM_A, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_HALL_LOCK_TIMING : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_B_UNLOCK_TIMING : [HALL, ROOM_A, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_A_UNLOCK_TIMING : [HALL, ROOM_A, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_HALL_UNLOCK_TIMING : [HALL, ROOM_A, DOOR_LOCK_HALL, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_LOCK_RULE_A2 : [ROOM_A, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
> P_VISITOR_RULE_A : [ROOM_A, VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]

[info] Synthetic Cost (number of monitored models)
partControllers : [[VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]]
> P_LOCK_RULE_A1's cost : 5
> P_A_LOCK_TIMING's cost : 5
> P_LOCK_RULE_HALL1's cost : 6
> P_VISITOR_RULE_HALL's cost : 6
> P_UNLOCK_RULE_HALL1's cost : 6
> P_LOCK_RULE_HALL2's cost : 7
> P_HALL_LOCK_TIMING's cost : 6
> P_B_UNLOCK_TIMING's cost : 6
> P_A_UNLOCK_TIMING's cost : 6
> P_HALL_UNLOCK_TIMING's cost : 7
> P_LOCK_RULE_A2's cost : 5
> P_VISITOR_RULE_A's cost : 5

[info] Monitored Models
> P_LOCK_RULE_HALL1 : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_B, DOOR_LOCK_A]
> P_VISITOR_RULE_HALL : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_B, DOOR_LOCK_A]
> P_UNLOCK_RULE_HALL1 : [DOOR_LOCK_HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_B, DOOR_LOCK_A]
> P_LOCK_RULE_HALL2 : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_B, DOOR_LOCK_A]
> P_HALL_LOCK_TIMING : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_B, DOOR_LOCK_A]
> P_B_UNLOCK_TIMING : [HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_B, DOOR_LOCK_A]
> P_A_UNLOCK_TIMING : [HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_B, DOOR_LOCK_A]
> P_HALL_UNLOCK_TIMING : [HALL, DOOR_LOCK_HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_B, DOOR_LOCK_A]

[info] Synthetic Cost (number of monitored models)
partControllers : [[VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_B, DOOR_LOCK_A]]
> P_LOCK_RULE_HALL1's cost : 7
> P_VISITOR_RULE_HALL's cost : 7
> P_UNLOCK_RULE_HALL1's cost : 6
> P_LOCK_RULE_HALL2's cost : 7
> P_HALL_LOCK_TIMING's cost : 7
> P_B_UNLOCK_TIMING's cost : 6
> P_A_UNLOCK_TIMING's cost : 6
> P_HALL_UNLOCK_TIMING's cost : 7

[info] Monitored Models
> P_LOCK_RULE_HALL1 : [HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_HALL, DOOR_LOCK_B, DOOR_LOCK_A]
> P_VISITOR_RULE_HALL : [HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_HALL, DOOR_LOCK_B, DOOR_LOCK_A]
> P_LOCK_RULE_HALL2 : [HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_HALL, DOOR_LOCK_B, DOOR_LOCK_A]
> P_HALL_LOCK_TIMING : [HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_HALL, DOOR_LOCK_B, DOOR_LOCK_A]
> P_B_UNLOCK_TIMING : [HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_HALL, DOOR_LOCK_B, DOOR_LOCK_A]
> P_A_UNLOCK_TIMING : [HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_HALL, DOOR_LOCK_B, DOOR_LOCK_A]
> P_HALL_UNLOCK_TIMING : [HALL, VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_HALL, DOOR_LOCK_B, DOOR_LOCK_A]

[info] Synthetic Cost (number of monitored models)
partControllers : [[VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_HALL, DOOR_LOCK_B, DOOR_LOCK_A]]
> P_LOCK_RULE_HALL1's cost : 7
> P_VISITOR_RULE_HALL's cost : 7
> P_LOCK_RULE_HALL2's cost : 7
> P_HALL_LOCK_TIMING's cost : 7
> P_B_UNLOCK_TIMING's cost : 7
> P_A_UNLOCK_TIMING's cost : 7
> P_HALL_UNLOCK_TIMING's cost : 7

[info] STEP1 : Completed!

---------------------------------------------------
          Non-Optimized Synthesis Process          
---------------------------------------------------
[STEP0] PartController_0
 > Component Models : [VISITOR, DOOR_LOCK_B]
 > Analyzed Models  : [P_UNLOCK_RULE_B1]
 > Input Models     : [VISITOR, DOOR_LOCK_B, P_UNLOCK_RULE_B1]
 > Actions          : [notEnter, arrive_A.1, arrive_A.2, arrive_B.1, reqEnter_Hall, arrive_A.3, arrive_B.2, arrive_A.4, arrive_B.3, allow_Out, leave, resRoomStatus, reqOut, allow_B, allow_A, deny_B, deny_A, deny_Out, reqEnter_A, reqEnter_B, arrive_Hall.1, arrive_Hall.2, unLock_B, arrive_Hall.3, arrive_Hall.4, arrive_B.4, lock_B, deny_Hall, allow_Hall]
 > Input PartController  : []
 > Num of PartController : 0

[STEP1] PartController_1
 > Component Models : [VISITOR, ROOM_B, DOOR_LOCK_B]
 > Analyzed Models  : [P_LOCK_RULE_B2, P_B_LOCK_TIMING, P_LOCK_RULE_B1, P_UNLOCK_RULE_B1, P_VISITOR_RULE_B]
 > Input Models     : [ROOM_B, PartController_0, P_LOCK_RULE_B1, P_VISITOR_RULE_B, P_B_LOCK_TIMING, P_LOCK_RULE_B2]
 > Actions          : [notEnter, arrive_A.1, arrive_B.1, arrive_A.2, arrive_B.2, reqEnter_Hall, arrive_A.3, arrive_B.3, arrive_A.4, allow_Out, leave, resRoomStatus, reqOut, allow_B, allow_A, deny_B, deny_A, deny_Out, reqEnter_A, reqEnter_B, arrive_Hall.1, arrive_Hall.2, unLock_B, arrive_Hall.3, arrive_Hall.4, arrive_B.4, lock_B, deny_Hall, allow_Hall]
 > Input PartController  : [PartController_0]
 > Num of PartController : 1

[STEP2] PartController_2
 > Component Models : [VISITOR, ROOM_B, DOOR_LOCK_B, DOOR_LOCK_A]
 > Analyzed Models  : [P_LOCK_RULE_B2, P_B_LOCK_TIMING, P_LOCK_RULE_B1, P_UNLOCK_RULE_A1, P_UNLOCK_RULE_B1, P_VISITOR_RULE_B]
 > Input Models     : [DOOR_LOCK_A, PartController_1, P_UNLOCK_RULE_A1]
 > Actions          : [notEnter, arrive_A.1, arrive_B.1, arrive_A.2, arrive_B.2, reqEnter_Hall, arrive_A.3, arrive_B.3, arrive_A.4, allow_Out, leave, resRoomStatus, reqOut, allow_B, allow_A, deny_B, deny_A, deny_Out, reqEnter_A, reqEnter_B, unLock_A, arrive_Hall.1, arrive_Hall.2, unLock_B, arrive_Hall.3, arrive_Hall.4, arrive_B.4, lock_B, deny_Hall, lock_A, allow_Hall]
 > Input PartController  : [PartController_1]
 > Num of PartController : 1

[STEP3] PartController_3
 > Component Models : [VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_B, DOOR_LOCK_A]
 > Analyzed Models  : [P_LOCK_RULE_B2, P_LOCK_RULE_A1, P_B_LOCK_TIMING, P_A_LOCK_TIMING, P_LOCK_RULE_A2, P_LOCK_RULE_B1, P_UNLOCK_RULE_A1, P_UNLOCK_RULE_B1, P_VISITOR_RULE_A, P_VISITOR_RULE_B]
 > Input Models     : [ROOM_A, PartController_2, P_LOCK_RULE_A1, P_A_LOCK_TIMING, P_LOCK_RULE_A2, P_VISITOR_RULE_A]
 > Actions          : [notEnter, arrive_A.1, arrive_A.2, arrive_B.1, arrive_A.3, arrive_B.2, reqEnter_Hall, arrive_A.4, arrive_B.3, allow_Out, leave, resRoomStatus, reqOut, allow_B, allow_A, deny_B, deny_A, deny_Out, reqEnter_A, reqEnter_B, unLock_A, arrive_Hall.1, arrive_Hall.2, unLock_B, arrive_Hall.3, arrive_Hall.4, arrive_B.4, lock_B, deny_Hall, lock_A, allow_Hall]
 > Input PartController  : [PartController_2]
 > Num of PartController : 1

[STEP4] PartController_4
 > Component Models : [VISITOR, ROOM_B, ROOM_A, DOOR_LOCK_HALL, DOOR_LOCK_B, DOOR_LOCK_A]
 > Analyzed Models  : [P_LOCK_RULE_B2, P_LOCK_RULE_A1, P_B_LOCK_TIMING, P_A_LOCK_TIMING, P_LOCK_RULE_A2, P_LOCK_RULE_B1, P_UNLOCK_RULE_A1, P_UNLOCK_RULE_B1, P_VISITOR_RULE_A, P_VISITOR_RULE_B, P_UNLOCK_RULE_HALL1]
 > Input Models     : [DOOR_LOCK_HALL, PartController_3, P_UNLOCK_RULE_HALL1]
 > Actions          : [notEnter, arrive_A.1, arrive_A.2, arrive_B.1, arrive_A.3, arrive_B.2, reqEnter_Hall, arrive_A.4, arrive_B.3, allow_Out, lock_Hall, unLock_Hall, leave, resRoomStatus, reqOut, allow_B, allow_A, deny_B, deny_A, deny_Out, reqEnter_A, reqEnter_B, unLock_A, arrive_Hall.1, arrive_Hall.2, unLock_B, arrive_Hall.3, arrive_Hall.4, arrive_B.4, lock_B, deny_Hall, lock_A, allow_Hall]
 > Input PartController  : [PartController_3]
 > Num of PartController : 1

[STEP5] Controller
 > Component Models : [DOOR_LOCK_HALL, VISITOR, ROOM_B, ROOM_A, HALL, DOOR_LOCK_B, DOOR_LOCK_A]
 > Analyzed Models  : [P_LOCK_RULE_B2, P_LOCK_RULE_A1, P_B_LOCK_TIMING, P_A_LOCK_TIMING, P_LOCK_RULE_A2, P_HALL_LOCK_TIMING, P_LOCK_RULE_HALL1, P_LOCK_RULE_B1, P_LOCK_RULE_HALL2, P_A_UNLOCK_TIMING, P_VISITOR_RULE_A, P_VISITOR_RULE_B, P_B_UNLOCK_TIMING, P_UNLOCK_RULE_A1, P_UNLOCK_RULE_B1, P_HALL_UNLOCK_TIMING, P_UNLOCK_RULE_HALL1, P_VISITOR_RULE_HALL]
 > Input Models     : [HALL, PartController_4, P_LOCK_RULE_HALL1, P_VISITOR_RULE_HALL, P_LOCK_RULE_HALL2, P_HALL_LOCK_TIMING, P_B_UNLOCK_TIMING, P_A_UNLOCK_TIMING, P_HALL_UNLOCK_TIMING]
 > Actions          : [notEnter, arrive_A.1, arrive_A.2, arrive_B.1, arrive_A.3, arrive_B.2, reqEnter_Hall, arrive_A.4, arrive_B.3, allow_Out, lock_Hall, unLock_Hall, leave, resRoomStatus, reqOut, allow_B, allow_A, deny_B, deny_A, deny_Out, reqEnter_A, reqEnter_B, arrive_Hall.1, unLock_A, arrive_Hall.2, unLock_B, arrive_Hall.3, arrive_Hall.4, arrive_B.4, lock_B, deny_Hall, lock_A, allow_Hall]
 > Input PartController  : [PartController_4]
 > Num of PartController : 1



[info] STEP2 : Optimizing the synthesis process...
[info] STEP2 : Completed!

---------------------------------------------------
            Optimized Synthesis Process            
---------------------------------------------------
[STEP0] Controller
 > Component Models : [DOOR_LOCK_HALL, VISITOR, ROOM_B, ROOM_A, HALL, DOOR_LOCK_B, DOOR_LOCK_A]
 > Analyzed Models  : [P_LOCK_RULE_B2, P_LOCK_RULE_A1, P_B_LOCK_TIMING, P_A_LOCK_TIMING, P_LOCK_RULE_A2, P_HALL_LOCK_TIMING, P_LOCK_RULE_HALL1, P_LOCK_RULE_B1, P_LOCK_RULE_HALL2, P_A_UNLOCK_TIMING, P_VISITOR_RULE_A, P_VISITOR_RULE_B, P_B_UNLOCK_TIMING, P_UNLOCK_RULE_A1, P_UNLOCK_RULE_B1, P_HALL_UNLOCK_TIMING, P_UNLOCK_RULE_HALL1, P_VISITOR_RULE_HALL]
 > Input Models     : [DOOR_LOCK_A, DOOR_LOCK_B, DOOR_LOCK_HALL, HALL, ROOM_A, ROOM_B, VISITOR, P_A_LOCK_TIMING, P_A_UNLOCK_TIMING, P_B_LOCK_TIMING, P_B_UNLOCK_TIMING, P_HALL_LOCK_TIMING, P_HALL_UNLOCK_TIMING, P_LOCK_RULE_A1, P_LOCK_RULE_A2, P_LOCK_RULE_B1, P_LOCK_RULE_B2, P_LOCK_RULE_HALL1, P_LOCK_RULE_HALL2, P_UNLOCK_RULE_A1, P_UNLOCK_RULE_B1, P_UNLOCK_RULE_HALL1, P_VISITOR_RULE_A, P_VISITOR_RULE_B, P_VISITOR_RULE_HALL]
 > Actions          : [notEnter, arrive_A.1, arrive_A.2, arrive_B.1, arrive_A.3, arrive_B.2, reqEnter_Hall, arrive_A.4, arrive_B.3, allow_Out, lock_Hall, unLock_Hall, leave, resRoomStatus, reqOut, allow_B, allow_A, deny_B, deny_A, deny_Out, reqEnter_A, reqEnter_B, arrive_Hall.1, unLock_A, arrive_Hall.2, unLock_B, arrive_Hall.3, arrive_Hall.4, arrive_B.4, lock_B, deny_Hall, lock_A, allow_Hall]
 > Input PartController  : []
 > Num of PartController : 0



[info] STEP3 : Synthesizing from synthesis process...

-- Synthesis --------------------------------------
[info] Output Model : Controller
[info] Input Models : [DOOR_LOCK_A, DOOR_LOCK_B, DOOR_LOCK_HALL, HALL, ROOM_A, ROOM_B, VISITOR, P_A_LOCK_TIMING, P_A_UNLOCK_TIMING, P_B_LOCK_TIMING, P_B_UNLOCK_TIMING, P_HALL_LOCK_TIMING, P_HALL_UNLOCK_TIMING, P_LOCK_RULE_A1, P_LOCK_RULE_A2, P_LOCK_RULE_B1, P_LOCK_RULE_B2, P_LOCK_RULE_HALL1, P_LOCK_RULE_HALL2, P_UNLOCK_RULE_A1, P_UNLOCK_RULE_B1, P_UNLOCK_RULE_HALL1, P_VISITOR_RULE_A, P_VISITOR_RULE_B, P_VISITOR_RULE_HALL]
---------------------------------------------------
Composition:Controller = DOOR_LOCK_A || DOOR_LOCK_B || DOOR_LOCK_HALL || HALL || ROOM_A || ROOM_B || VISITOR || P_A_LOCK_TIMING || P_A_UNLOCK_TIMING || P_B_LOCK_TIMING || P_B_UNLOCK_TIMING || P_HALL_LOCK_TIMING || P_HALL_UNLOCK_TIMING || P_LOCK_RULE_A1 || P_LOCK_RULE_A2 || P_LOCK_RULE_B1 || P_LOCK_RULE_B2 || P_LOCK_RULE_HALL1 || P_LOCK_RULE_HALL2 || P_UNLOCK_RULE_A1 || P_UNLOCK_RULE_B1 || P_UNLOCK_RULE_HALL1 || P_VISITOR_RULE_A || P_VISITOR_RULE_B || P_VISITOR_RULE_HALL
State Space: 2 * 2 * 2 * 13 * 13 * 13 * 17 * 2 * 2 * 2 * 2 * 2 * 2 * 3 * 4 * 3 * 4 * 3 * 4 * 3 * 3 * 3 * 2 * 2 * 2 = 2 ** 47
Composing...
-- States: 661 Transitions: 2958 Memory used: 28475KB
Composed in 40ms
Solving the LTS control problem.
Environment states: 662
Game states: 662
Analysis time: 223ms.
Controller [661] generated successfully.
Composition:Controller = Controller || P_A_LOCK_TIMING || P_A_UNLOCK_TIMING || P_B_LOCK_TIMING || P_B_UNLOCK_TIMING || P_HALL_LOCK_TIMING || P_HALL_UNLOCK_TIMING || P_LOCK_RULE_A1 || P_LOCK_RULE_A2 || P_LOCK_RULE_B1 || P_LOCK_RULE_B2 || P_LOCK_RULE_HALL1 || P_LOCK_RULE_HALL2 || P_UNLOCK_RULE_A1 || P_UNLOCK_RULE_B1 || P_UNLOCK_RULE_HALL1 || P_VISITOR_RULE_A || P_VISITOR_RULE_B || P_VISITOR_RULE_HALL
State Space: 661 * 2 * 2 * 2 * 2 * 2 * 2 * 3 * 4 * 3 * 4 * 3 * 4 * 3 * 3 * 3 * 2 * 2 * 2 = 2 ** 37
Composing...
-- States: 661 Transitions: 1030 Memory used: 33561KB
Composed in 43ms
[info] STEP3 : Completed!



[info] Problem-Splitting Controller Synthesis is Complete!
[info] Maximum State       : 661
[info] Maximum Transition  : 2958
[info] Maximum Memory (KB) : 33561
[info] Execution Time (ms) : 1012(all process)
                           : 4(step1)
                           : 0(step2)
                           : 315(step3)

